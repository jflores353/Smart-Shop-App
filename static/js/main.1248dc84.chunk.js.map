{"version":3,"sources":["components/AppNavbar.js","components/Login.js","actions/itemActions.js","actions/types.js","components/ItemModal.js","components/ShoppingList.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","_this","setState","react_default","a","createElement","Navbar","color","dark","expand","className","Container","NavbarBrand","href","src","alt","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","Login","Form","FormGroup","Label","Input","type","placeholder","Button","react_router_dom","to","lib","setItemsLoading","ItemModal","modal","name","onChange","e","Object","defineProperty","target","value","onSubmit","preventDefault","newItem","props","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","for","id","marginTop","block","connect","item","dispatch","axios","post","concat","process","then","res","payload","data","ShoppingList","onDeleteClick","deleteItem","getItems","_this2","items","components_ItemModal","ListGroup","TransitionGroup","marginLeft","marginRight","Row","map","_ref","_id","CSSTransition","key","timeout","classNames","ListGroupItem","size","bind","get","delete","initialState","loading","combineReducers","arguments","length","undefined","action","objectSpread","toConsumableArray","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","basename","es","components_AppNavbar","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1248dc84.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Collapse, // Allows Toggler\r\n    Navbar,\r\n    NavbarToggler, // Hamburger menu, will use this.toggle\r\n    NavbarBrand, // Can have a href attribute\r\n    Nav, // Wraps around all the links\r\n    NavItem, // Wraps the NavLink\r\n    NavLink, // Will have the href attribute\r\n    Container // Bootstrap container to move everything to the middle\r\n} from 'reactstrap';\r\n\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n            isOpen: false\r\n        }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar color=\"success\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\" >\r\n                            <img src=\"./logo.png\" alt=\"logo-img\" className=\"my-logo\"/>\r\n                        </NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} />\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com/jflores353/smart-shop-app\">\r\n                                        Github\r\n                                    </NavLink>\r\n                                </NavItem>  \r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AppNavbar;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    NavItem,\r\n    Nav\r\n} from 'reactstrap';\r\n\r\nimport { GoogleLoginButton } from 'react-social-login-buttons';\r\n\r\nclass Login extends Component {\r\n    render(){\r\n        return (\r\n            <Form className=\"login-form\">\r\n                <h1>\r\n                    <span className=\"font-weight-bold\">Sign in to Your Smart Shop</span>\r\n                </h1>\r\n                \r\n                <FormGroup>\r\n                    <Label>Email</Label>\r\n                    <Input type=\"email\" placeholder=\"Email\"/>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label>Password</Label>\r\n                    <Input type=\"password\" placeholder=\"Password\"/>\r\n                </FormGroup>\r\n\r\n                \r\n                <Button color=\"success\" className=\"btn-lg btn-block login-btn\" >\r\n                    <Nav>\r\n                        <NavItem>\r\n                            <Link className=\"login-btn nav-link\" to=\"./ShoppingList\">\r\n                                Log In\r\n                            </Link>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Button>\r\n            \r\n\r\n                <div className=\"text-centered pt-3\">\r\n                    Login with your Google account instead\r\n                </div>\r\n                <GoogleLoginButton className=\"mt-3 mb-3\"/>\r\n                <div className=\"text-center\">\r\n                    <a href=\"/sign-up\">Sign up</a>\r\n                    <span className=\"p-2\">|</span>\r\n                    <a href=\"/forgot-password\">Forgot Password</a>\r\n                </div>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","// This is where we make our requests to the backend\r\nimport axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\nexport const getItems = () => dispatch => {\r\n    // return {\r\n    //  type: GET_ITEMS\r\n    // }\r\n    dispatch(setItemsLoading());\r\n    axios\r\n        .get(`${process.env.REACT_APP_API_URL}/api/items`)\r\n        .then(res =>\r\n            dispatch({\r\n                type: GET_ITEMS,\r\n                payload: res.data\r\n            })\r\n        );\r\n};\r\n\r\nexport const addItem = item => dispatch => {\r\n    axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/items`, item)\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_ITEM,\r\n                payload: res.data\r\n            })\r\n        )\r\n};\r\n\r\nexport const deleteItem = id => dispatch => {\r\n    axios\r\n        .delete(`${process.env.REACT_APP_API_URL}/${id}`)\r\n        .then(res =>\r\n            dispatch({\r\n                type: DELETE_ITEM,\r\n                payload: id\r\n            })\r\n        );\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    };\r\n};","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';","// This is a container, a component that is hooked to redux, using redux state inside a react component\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\nclass ItemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newItem = {\r\n            name: this.state.name\r\n        };\r\n\r\n        // Add item with addItem action\r\n        this.props.addItem(newItem);\r\n\r\n        // Close modal\r\n        this.toggle();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button className=\"modal-btn\"\r\n                    color=\"success\"\r\n                    style={{ marginBottom: '2rem'}}\r\n                    onClick={this.toggle}\r\n                >Add Item</Button>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>\r\n                    Add to Shopping Cart\r\n                    </ModalHeader> \r\n\r\n                    <ModalBody >\r\n                      <Form onSubmit= {this.onSubmit}>\r\n                        <FormGroup>\r\n                            <Label for=\"item\">Item</Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                id=\"item\"\r\n                                placeholder=\"Add Item\"\r\n                                onChange={this.onChange}\r\n                            />\r\n                            <Button\r\n                                color=\"success\"\r\n                                style= {{ marginTop: '2rem' }} block>\r\n                            Add Item\r\n                            </Button>\r\n                        </FormGroup>\r\n                      </Form>\r\n                    </ModalBody> \r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n}); \r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button, Row } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem }from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\nimport ItemModal from './ItemModal';\r\n\r\nclass ShoppingList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDeleteClick = id => {\r\n        this.props.deleteItem(id);\r\n    }\r\n   \r\n    render(){\r\n        const { items } =this.props.item; \r\n        return(\r\n            <Container>\r\n                <ItemModal />\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\" style={{ marginLeft: '1rem', marginRight: '1rem'}}>\r\n                        <Row className= \"row-content\">\r\n                            {items.map(({ _id, name }) => (\r\n                                \r\n                                <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                    <ListGroupItem>\r\n                                        <Button\r\n                                            className=\"remove-btn\"\r\n                                            color=\"danger\"\r\n                                            size=\"sm\"\r\n                                            onClick={this.onDeleteClick.bind(this, _id)}\r\n                                        >&times;\r\n                                        </Button>\r\n                                        {name}\r\n                                    </ListGroupItem>\r\n                                </CSSTransition> \r\n                            ))}\r\n                        </Row>\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items:[],\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            };\r\n        \r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {\r\n\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose (\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // https://github.com/zalmoxisus/redux-devtools-extension#usage\r\n));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport Login from './components/Login';\nimport ShoppingList from './components/ShoppingList';\n\nimport { BrowserRouter, Route } from \"react-router-dom\";\n// import Maps from './containers/mapsContainer';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return ( \n      <BrowserRouter basename={`/${process.env.REACT_APP_BASENAME}`}>\n        <Provider store = {store}>\n          <div className=\"App\">\n          <AppNavbar />\n            <Route path=\"/\" exact component={Login} />\n            <Route path=\"/ShoppingList/\" component={ShoppingList} />\n            {/* <Maps /> */}\n            \n          </div>\n        </Provider>\n      </BrowserRouter>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}